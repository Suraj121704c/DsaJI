
// Generate all subsequence Ended
// Description

// A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.

// You are given a string S. You have to generate all the subsequences of the string S using a recursive approach (duplicates allowed)


// Input
// Input Format :

// First line of the input contains length of the string S

// Second line of the test case contains the string S

// Constraints :

// n <= 18




// Output
// Output all the substring in a particular order. To understand the order of printing, see the sample test case explanation


// Sample Input 1 

// 4
// abcd
// Sample Output 1

// a
// ab
// abc
// abcd
// abd
// ac
// acd
// ad
// b
// bc
// bcd
// bd
// c
// cd
// d
// Hint

// Output Explanation :

// First output all the subsequences starting with first character. When all such subsequences got printed, then move to print all such starting with second chars, and so on.

function Subsequence(str,new_str,position){
    if(new_str.length!=0){
        console.log(new_str.join(""));
    }
    if(str.length==position){
        return ;
    }
    for(let i=position; i<str.length; i++){
        new_str.push(str[i]);
          Subsequence(str,new_str,i+1);
        new_str.pop();
    }
}
function runProgram(input){
    input=input.split("\n");
    let N=+input[0]
    let str=input[1];
     let new_str=[];
Subsequence(str,new_str,0)
}
if (process.env.USERNAME === "") {
    runProgram(``);
} else {
    process.stdin.resume();
    process.stdin.setEncoding("ascii");
    let read = "";
    process.stdin.on("data", function (input) {
        read += input; });
    process.stdin.on("end", function () {
        read = read.replace(/\n$/, "");
        read = read.replace(/\n$/, "");
        runProgram(read);});
    process.on("SIGINT", function () {
        read = read.replace(/\n$/, "");
        runProgram(read);
        process.exit(0); }); }